# Author: Buffy the Base Agent
# Date: 2025-01-27
# PURPOSE: Railway-optimized Dockerfile for PlanExe API server - handles Railway's PORT variable and environment
# SRP and DRY check: Pass - Single responsibility of Railway API containerization

FROM node:20-bullseye-slim AS frontend-builder

WORKDIR /app/planexe-frontend

# Install dependencies and build static Next.js export
COPY planexe-frontend/package*.json ./
RUN npm ci
COPY planexe-frontend/ .
RUN npm run build:static

FROM python:3.13-slim

# Set working directory
WORKDIR /app

# Install system dependencies including curl for health checks
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Copy Python requirements first for better caching
COPY pyproject.toml ./
COPY planexe_api/requirements.txt ./planexe_api/

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -e . && \
    pip install --no-cache-dir -r planexe_api/requirements.txt

# Copy application code
COPY . .

# Copy built frontend static assets into location served by FastAPI
COPY --from=frontend-builder /app/planexe-frontend/out /app/ui_static

# Create run directory for plan outputs
RUN mkdir -p /app/run && chmod 755 /app/run

# Set cloud mode environment variable for PlanExe configuration system
ENV PLANEXE_CLOUD_MODE=true

# Ensure llm_config.json exists (copy from project root)
RUN test -f /app/llm_config.json || echo '{}' > /app/llm_config.json

# Set environment variables
ENV PYTHONPATH=/app
ENV PLANEXE_RUN_DIR=/app/run
ENV PYTHONUNBUFFERED=1

# Railway provides PORT environment variable - use dynamic port
EXPOSE 8080

# Health check using Railway's PORT variable (shell form for variable expansion)
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD sh -c 'curl -f http://localhost:${PORT:-8080}/health || exit 1'

# Start the API server using cloud-native configuration
CMD ["sh", "-c", "python -m uvicorn planexe_api.api:app --host 0.0.0.0 --port ${PORT:-8080}"]
