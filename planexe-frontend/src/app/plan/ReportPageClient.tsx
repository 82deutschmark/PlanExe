/**
 * Author: Claude (Sonnet 4.5)
 * Date: 2025-10-28
 * PURPOSE: Display rich HTML report generated by ReportGenerator (via fallback-report endpoint)
 * SRP and DRY check: Pass - dedicated to displaying the fully-formatted HTML report
 */
'use client';

import React, { useEffect, useMemo, useState, useRef } from 'react';
import Link from 'next/link';
import { useSearchParams } from 'next/navigation';
import { Home, Download, AlertCircle, RefreshCw } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { fastApiClient } from '@/lib/api/fastapi-client';

/**
 * Renders a full HTML report in an iframe with auto-height adjustment
 */
interface ReportIframeProps {
  html: string;
  className?: string;
}

const ReportIframe: React.FC<ReportIframeProps> = ({ html, className = '' }) => {
  const [blobUrl, setBlobUrl] = useState<string>('');
  const [height, setHeight] = useState<number>(600);
  const iframeRef = useRef<HTMLIFrameElement>(null);

  // Create blob URL from HTML string
  useEffect(() => {
    const blob = new Blob([html], { type: 'text/html; charset=utf-8' });
    const url = URL.createObjectURL(blob);
    setBlobUrl(url);

    return () => {
      URL.revokeObjectURL(url);
    };
  }, [html]);

  // Auto-adjust iframe height to match content
  useEffect(() => {
    if (!iframeRef.current || !blobUrl) return;

    const iframe = iframeRef.current;

    const adjustHeight = () => {
      try {
        const doc = iframe.contentDocument || iframe.contentWindow?.document;
        if (doc && doc.body) {
          const newHeight = Math.max(
            doc.body.scrollHeight,
            doc.body.offsetHeight,
            doc.documentElement.clientHeight,
            doc.documentElement.scrollHeight,
            doc.documentElement.offsetHeight
          );
          setHeight(newHeight + 40); // Add some padding
        }
      } catch (e) {
        // Cross-origin or iframe not ready
        console.debug('Iframe height adjustment skipped:', e);
      }
    };

    iframe.addEventListener('load', () => {
      adjustHeight();

      // Re-check after a delay (for dynamic content like charts)
      setTimeout(adjustHeight, 100);
      setTimeout(adjustHeight, 500);
      setTimeout(adjustHeight, 1000);
      setTimeout(adjustHeight, 2000);
    });

    return () => {
      iframe.removeEventListener('load', adjustHeight);
    };
  }, [blobUrl]);

  if (!blobUrl) {
    return (
      <div className="flex items-center justify-center p-8 text-gray-500">
        <div className="h-5 w-5 animate-spin rounded-full border-2 border-blue-600 border-t-transparent mr-2"></div>
        Preparing report...
      </div>
    );
  }

  return (
    <iframe
      ref={iframeRef}
      src={blobUrl}
      title="PlanExe Report"
      className={`w-full border-0 ${className}`}
      style={{ height: `${height}px`, minHeight: '600px' }}
      sandbox="allow-scripts allow-same-origin allow-downloads allow-popups"
      loading="eager"
    />
  );
};

const ReportPageClient: React.FC = () => {
  const search = useSearchParams();
  const planId = useMemo(() => (search?.get('planId') ?? '').trim(), [search]);
  const fromRecovery = (search?.get('from') ?? '') === 'recovery';

  const [reportHtml, setReportHtml] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const loadReport = async () => {
    if (!planId) return;

    setLoading(true);
    setError(null);
    setReportHtml(null);

    try {
      // Load rich HTML report from fallback-report endpoint
      // This now uses ReportGenerator to build the same rich HTML as ReportTask
      const fallbackResponse = await fastApiClient.getFallbackReport(planId);
      setReportHtml(fallbackResponse.assembled_html);
    } catch (e) {
      const message = e instanceof Error ? e.message : 'Unable to load report.';
      setError(message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    void loadReport();
  }, [planId]);

  const handleDownloadHtml = async () => {
    if (!reportHtml || !planId) return;
    const blob = new Blob([reportHtml], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${planId}-report.html`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  if (!planId) {
    return (
      <div className="min-h-screen bg-amber-50">
        <header className="border-b border-amber-200 bg-white/90 backdrop-blur px-4 py-3">
          <div className="mx-auto flex max-w-7xl items-center justify-between">
            <h1 className="text-2xl font-semibold text-amber-900">Plan Report</h1>
            <Button asChild variant="outline" size="sm">
              <Link href="/">
                <Home className="mr-2 h-4 w-4" aria-hidden="true" />
                Back to Dashboard
              </Link>
            </Button>
          </div>
        </header>
        <main className="mx-auto max-w-7xl px-4 py-6">
          <Card className="border-orange-300 bg-orange-50">
            <CardHeader>
              <CardTitle className="text-amber-900">Missing planId</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-gray-900">This page needs a valid planId query parameter.</p>
            </CardContent>
          </Card>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-amber-50 via-orange-50 to-yellow-50">
      <header className="border-b border-amber-300 bg-white/90 backdrop-blur px-4 py-3 sticky top-0 z-50">
        <div className="mx-auto flex max-w-7xl items-center justify-between">
          <h1 className="text-2xl font-semibold text-amber-900">Plan Report</h1>
          <div className="flex items-center gap-2">
            <Button asChild variant="outline" size="sm">
              <Link href={`/recovery?planId=${encodeURIComponent(planId)}`}>
                Back to Recovery
              </Link>
            </Button>
            <Button asChild variant="outline" size="sm">
              <Link href="/">
                <Home className="mr-2 h-4 w-4" aria-hidden="true" />
                Dashboard
              </Link>
            </Button>
            {reportHtml && (
              <Button
                variant="default"
                size="sm"
                onClick={handleDownloadHtml}
                disabled={loading}
              >
                <Download className="mr-2 h-4 w-4" aria-hidden="true" />
                Download HTML
              </Button>
            )}
            {!loading && (
              <Button
                variant="ghost"
                size="sm"
                onClick={loadReport}
                disabled={loading}
              >
                <RefreshCw className="mr-2 h-4 w-4" aria-hidden="true" />
                Refresh
              </Button>
            )}
          </div>
        </div>
      </header>

      <main className="mx-auto max-w-7xl px-4 py-4">
        {fromRecovery && (
          <div className="mb-3 rounded border border-emerald-200 bg-emerald-50 p-3 text-sm text-emerald-800">
            Pipeline completed. Viewing the final rich HTML report.
          </div>
        )}

        {loading && (
          <Card className="border-blue-200 bg-blue-50">
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className="h-5 w-5 animate-spin rounded-full border-2 border-blue-600 border-t-transparent"></div>
                <p className="text-sm text-blue-900">Loading report...</p>
              </div>
            </CardContent>
          </Card>
        )}

        {error && !loading && (
          <Card className="border-red-200 bg-red-50">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-red-900">
                <AlertCircle className="h-5 w-5" />
                Failed to Load Report
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-red-800 mb-3">{error}</p>
              <p className="text-xs text-red-700">
                The report may not have been generated yet. Try refreshing once the pipeline completes.
              </p>
            </CardContent>
          </Card>
        )}

        {reportHtml && !loading && (
          <div className="bg-white rounded-lg shadow-lg overflow-hidden">
            {/* Rich HTML report rendered in iframe to preserve CSS and JavaScript */}
            <ReportIframe html={reportHtml} />
          </div>
        )}

        {!reportHtml && !loading && !error && (
          <Card className="border-amber-200 bg-amber-50">
            <CardContent className="p-6">
              <p className="text-sm text-amber-900">
                No report available yet. The pipeline may still be running.
              </p>
            </CardContent>
          </Card>
        )}
      </main>
    </div>
  );
};

export default ReportPageClient;
